version: 2.1

###########################################
# Constants
###########################################
workspace_root: &workspace_root
    ~/repo

node_modules_dir: &node_modules_dir
    # XXX: should use glob?
    node_modules/

yarnpkg_cache_dir: &yarnpkg_cache_dir
    # We'd like to use the absolute path, but CircleCI command parser does not allow it.
    ./.cache/yarn

distributable_dir: &distributable_dir
    ./__dist


###########################################
# Executors Definitions
###########################################
executors:
    nodejs_12_executor:
        working_directory: *workspace_root
        docker:
            - image: node:12-buster
        environment:
            YARN_CACHE_FOLDER: *yarnpkg_cache_dir

    latest_nodejs_executor:
        working_directory: *workspace_root
        docker:
            - image: node:13-buster
        environment:
            YARN_CACHE_FOLDER: *yarnpkg_cache_dir


###########################################
# Commands Definitions
###########################################
commands:
    ###########################################
    # Bootstrap Commands
    ###########################################
    install_npm_dependency:
        description: "Install dependencies for Node.js"
        steps:
            - run:
                command: |
                    if [ -z "$YARN_CACHE_FOLDER" ]; then
                        echo '$YARN_CACHE_FOLDER  is undefined or empty string'
                        exit 1
                    fi
                    yarn install

    ###########################################
    # Test Commands
    ###########################################
    build_distribution:
        ## TODO description
        description: "Test all required items"
        steps:
            - run: make clean -j
            - run: make distribution -j
            - run: make git_diff -j

    run_unit_tests:
        ## TODO description
        description: "Test all required items"
        steps:
            - run: make clean -j
            - run: make run_ava -j
            - run: make git_diff -j

    run_package_test:
        ## TODO description
        description: "Test all required items"
        steps:
            - run: make run_test_distribution_contain_all -j
            - run: make run_test_esmodule_path_rewrite -j
            ## TODO: Should we make this separate job?
            - run: make test_package_install -j


###########################################
# Cache Commands
###########################################
cmd_restore_cache: &cmd_restore_cache
    restore_cache:
        keys:
            # By [the document](https://circleci.com/docs/2.0/caching/),
            # Circle CI 2.0 does not have any interfaces to clear caches which we stored from the past.
            # And Ciecle CI 2.0's cache system strongly depends on a cache naming.
            #
            # So we should (must) add a "version" prefix to enable to clear all old caches.
            #   * If we'd like to clear caches, then we should increment the prefix. lol
            #   * The lifecycle is [here](https://circleci.com/docs/2.0/configuration-reference/#attach_workspace).
            #
            # By these things, it's not good that construcing strong (macthing widely) cache hierarchy.
            # If we construct a strong (macthing widely) cache hierarchy,
            # we need to clean up it periodically by hand.
            #
            # Thus we use the check sum of `yarn.lock` as the cache key.
            # Because:
            #   1. Even if we use only 1 cache stage which usses the check sum of `yarn.lock`,
            #      it's not be a serious problem which misses cache hit by modifying yarn.lock frequently.
            #   2. Today, we don't do dependency gardening every day. It would happens per 1~2 weeks.
            #      So the cache hit miss rate would be low.
            #   3. I don't think our code base would scale to gigantic mono-repository
            #      depending on many npm packages with the order of magnitude.
            #   4. We cache yarnpkg's cache, not `node_modules/`. This cache is construced by `yarn.lock`.
            #      If we change `yarn.lock`, then the CircleCI cache would be reconstructed cleanly.
            - v0-dep-{{ arch }}-{{ checksum "yarn.lock" }}

cmd_save_cache: &cmd_save_cache
    save_cache:
        key: v0-dep-{{ arch }}-{{ checksum "yarn.lock" }}-{{ epoch }}
        paths:
            # If we include `node_modules`, this step will require a 2min~ to complete this.
            # So I upload only `~/.cache/yarn`.
            # There is no problem because yarnpkg would use it to construct each of `node_modules/`.
            #
            # Of course, if there is no `node_modules/`,
            # yarnpkg requires more times to setup it than there is a cache of `node_modules/`.
            # However, `yarn install` does not take longer time than uploading `node_modules/`.
            # By this result, I don't upload `node_modules/`.
            - *yarnpkg_cache_dir


###########################################
# Workspaces Commands
###########################################
cmd_attach_workspace: &cmd_attach_workspace
    attach_workspace:
        at: *workspace_root

cmd_persist_to_workspace_with_dependency_cache: &cmd_persist_to_workspace_with_dependency_cache
    persist_to_workspace:
        root: *workspace_root
        paths:
            - *yarnpkg_cache_dir

cmd_persist_distributable_dir_to_workspace: &cmd_persist_distributable_dir_to_workspace
    persist_to_workspace:
        root: *workspace_root
        paths:
            - *distributable_dir


###########################################
# Job Definitions
###########################################
jobs:
    install_dependencies:
        executor: latest_nodejs_executor
        steps:
            - checkout
            - *cmd_restore_cache
            - install_npm_dependency
            - *cmd_save_cache
            - *cmd_persist_to_workspace_with_dependency_cache

    ###########################################
    # Minimum Supported
    ###########################################
    minimum_build_distribution:
        executor: nodejs_12_executor
        steps:
            - checkout
            - *cmd_attach_workspace
            - install_npm_dependency
            - build_distribution
            - *cmd_persist_distributable_dir_to_workspace
            - *cmd_persist_to_workspace_with_dependency_cache

    minimum_run_unit_tests:
        executor: nodejs_12_executor
        steps:
            - checkout
            - *cmd_attach_workspace
            - run_unit_tests

    minimum_run_package_tests:
        executor: nodejs_12_executor
        steps:
            - checkout
            - *cmd_attach_workspace
            - run_package_test


    ###########################################
    # Latest Supported
    ###########################################
    latest_build_distribution:
        executor: latest_nodejs_executor
        steps:
            - checkout
            - *cmd_attach_workspace
            - install_npm_dependency
            - build_distribution
            - *cmd_persist_distributable_dir_to_workspace
            - *cmd_persist_to_workspace_with_dependency_cache

    latest_run_unit_tests:
        executor: latest_nodejs_executor
        steps:
            - checkout
            - *cmd_attach_workspace
            - run_unit_tests

    latest_run_package_tests:
        executor: latest_nodejs_executor
        steps:
            - checkout
            - *cmd_attach_workspace
            - run_package_test


###########################################
# Workflow Conditions
###########################################
ignore_branches_for_bors: &ignore_branches_for_bors
    # These branches are used by bors-ng
    branches:
        ignore:
            - staging.tmp
            - trying.tmp


###########################################
# Workflow Definitions
###########################################
workflows:
    version: 2
    build_and_test:
        jobs:
            - install_dependencies:
                filters:
                    <<: *ignore_branches_for_bors

            ###########################################
            # Minimum Supported
            ###########################################
            - minimum_build_distribution:
                requires:
                    - install_dependencies
                filters:
                    <<: *ignore_branches_for_bors

            - minimum_run_unit_tests:
                ## TODO should we use the artifacts built on latest executor?
                requires:
                    - minimum_build_distribution
                filters:
                    <<: *ignore_branches_for_bors

            - minimum_run_package_tests:
                requires:
                    - minimum_build_distribution
                filters:
                    <<: *ignore_branches_for_bors

            ###########################################
            # Latest Supported
            ###########################################
            - latest_build_distribution:
                requires:
                    - install_dependencies
                filters:
                    <<: *ignore_branches_for_bors

            - latest_run_unit_tests:
                requires:
                    - latest_build_distribution
                filters:
                    <<: *ignore_branches_for_bors

            - latest_run_package_tests:
                requires:
                    - latest_build_distribution
                filters:
                    <<: *ignore_branches_for_bors
